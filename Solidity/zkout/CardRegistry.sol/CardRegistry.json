{"abi":null,"bytecode":{"object":"00060000000000020000008005000039000000400050043f000000000301001900000060033002700000003e0330019700000001022001900000004e0000c13d000000040230008c000000720000413d000000000201043b000000e002200270000000400420009c000000560000613d000000410220009c000000720000c13d0000000002000416000000240330008c000000720000413d000000000202004b000000720000c13d0000000401100370000000000101043b0000000000100435000000200000043f00000040020000390000000001000019000400000005001d00f300d80000040f000600000001001d00f300740000040f000200000001001d0000000601000029000000010110003900f300740000040f00000006030000290000000202300039000000000202041a000500000002001d0000000402300039000000000202041a000300000002001d000000400300043d000600000003001d00000004020000290000000002230436000100000002001d000400000001001d0000008002300039000000020100002900f300c50000040f0000000002010019000000060120006a00000001030000290000000000130435000000040100002900f300c50000040f0000000302000029000000ff022001900000000002000019000000010200c039000000060400002900000060034000390000000000230435000000050200002900000042022001970000004003400039000000000023043500000000014100490000003e020000410000003e0340009c00000000040280190000003e0310009c000000000102801900000040024002100000006001100210000000000121019f000000f40001042e0000000001000416000000000101004b000000720000c13d0000002001000039000001000010044300000120000004430000003f01000041000000f40001042e0000000002000416000000440330008c000000720000413d000000000202004b000000720000c13d0000002402100370000000000302043b000000000203004b0000000002000019000000010200c039000000000223004b000000720000c13d0000000401100370000000000101043b0000000000100435000000200000043f00000040020000390000000001000019000600000003001d00f300d80000040f0000000401100039000001000200008a000000000301041a000000000223016f00000006022001af000000000021041b0000000001000019000000f40001042e0000000001000019000000f5000104300003000000000002000000000201041a000000010320019000000001042002700000007f0640018f000000000604c0190000001f0460008c00000000040000190000000104002039000000000443004b000000b70000c13d000000400500043d0000000004650436000000000303004b000000a00000613d000100000004001d000300000006001d000200000005001d00000000001004350000003e0100004100000000020004140000003e0320009c0000000002018019000000c00120021000000043011001c7000080100200003900f300ee0000040f0000000102200190000000c30000613d0000000306000029000000000206004b000000a70000613d000000000201043b0000000001000019000000020500002900000001070000290000000003170019000000000402041a000000000043043500000001022000390000002001100039000000000361004b000000980000413d000000a90000013d000001000100008a000000000112016f0000000000140435000000000106004b00000020010000390000000001006019000000a90000013d000000000100001900000002050000290000003f01100039000000200200008a000000000221016f0000000001520019000000000221004b00000000020000190000000102004039000000440310009c000000bd0000213d0000000102200190000000bd0000c13d000000400010043f0000000001050019000000000001042d000000450100004100000000001004350000002201000039000000040010043f0000004601000041000000f500010430000000450100004100000000001004350000004101000039000000040010043f0000004601000041000000f5000104300000000001000019000000f50001043000000000430104340000000001320436000000000203004b000000d10000613d000000000200001900000000052100190000000006240019000000000606043300000000006504350000002002200039000000000532004b000000ca0000413d000000000231001900000000000204350000001f02300039000000200300008a000000000232016f0000000001210019000000000001042d0000003e030000410000003e0410009c000000000103801900000040011002100000003e0420009c00000000020380190000006002200210000000000112019f00000000020004140000003e0420009c0000000002038019000000c002200210000000000112019f00000047011001c7000080100200003900f300ee0000040f0000000102200190000000ec0000613d000000000101043b000000000001042d0000000001000019000000f500010430000000f1002104230000000102000039000000000001042d0000000002000019000000000001042d000000f300000432000000f40001042e000000f5000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000a339567300000000000000000000000000000000000000000000000000000000707cd60c000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0200000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff4e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},"assembly":"\t.text\n\t.file\t\"CardRegistry.sol:CardRegistry\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[6]\n\tadd\t128, r0, r5\n\tst.1\t64, r5\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_3[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tadd\tr5, r0, stack-[4]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tr1, r0, stack-[6]\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\tr1, r0, stack-[2]\n\tadd\tstack-[6], r0, r1\n\tadd\t1, r1, r1\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r3\n\tadd\t2, r3, r2\n\tsload\tr2, r2\n\tadd\tr2, r0, stack-[5]\n\tadd\t4, r3, r2\n\tsload\tr2, r2\n\tadd\tr2, r0, stack-[3]\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[6]\n\tadd\tstack-[4], r0, r2\n\tst.1.inc\tr3, r2, r2\n\tadd\tr2, r0, stack-[1]\n\tadd\tr1, r0, stack-[4]\n\tadd\t128, r3, r2\n\tadd\tstack-[2], r0, r1\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tsub.s\tstack-[6], r2, r1\n\tadd\tstack-[1], r0, r3\n\tst.1\tr3, r1\n\tadd\tstack-[4], r0, r1\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r2\n\tand!\t255, r2, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tadd\tstack-[6], r0, r4\n\tadd\t96, r4, r3\n\tst.1\tr3, r2\n\tadd\tstack-[5], r0, r2\n\tand\t@CPI0_4[0], r2, r2\n\tadd\t64, r4, r3\n\tst.1\tr3, r2\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r3\n\tsub!\tr3, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tsub!\tr3, r2, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[6]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\t4, r1, r1\n\tsub.s\t256, r0, r2\n\tsload\tr1, r3\n\tand\tr3, r2, r2\n\tor\tstack-[6], r2, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\ncopy_array_from_storage_to_memory_string:\n.func_begin1:\n\tnop\tstack+=[3]\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.ne\t@.BB1_1\n\tld.1\t64, r5\n\tst.1.inc\tr5, r6, r4\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB1_6\n\tadd\tr4, r0, stack-[1]\n\tadd\tr6, r0, stack-[3]\n\tadd\tr5, r0, stack-[2]\n\tst.1\t0, r1\n\tadd\t@CPI1_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_8\n\tadd\tstack-[3], r0, r6\n\tsub!\tr6, r0, r2\n\tjump.eq\t@.BB1_10\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r5\n\tadd\tstack-[1], r0, r7\n.BB1_12:\n\tadd\tr7, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r6, r3\n\tjump.lt\t@.BB1_12\n\tjump\t@.BB1_4\n.BB1_6:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\tr4, r1\n\tsub!\tr6, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB1_4\n.BB1_10:\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r5\n.BB1_4:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_2[0], r1, r3\n\tjump.gt\t@.BB1_13\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_13\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tret\n.BB1_1:\n\tadd\t@CPI1_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_13:\n\tadd\t@CPI1_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_8:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nabi_encode_string:\n.func_begin2:\n\tld.1.inc\tr1, r3, r4\n\tst.1.inc\tr2, r3, r1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r2\n.BB2_2:\n\tadd\tr1, r2, r5\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr1, r3, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end2:\n\n__sha3:\n.func_begin3:\n\tadd\t@CPI3_0[0], r0, r3\n\tsub.s!\t@CPI3_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI3_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI3_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI3_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB3_2\n\tld\tr1, r1\n\tret\n.BB3_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\n__staticcall:\n.func_begin4:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB4_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB4_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end4:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\nCPI3_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 2738443891\nCPI0_3:\n\t.cell 1887229452\nCPI0_4:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI1_1:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI1_2:\n\t.cell 18446744073709551615\nCPI1_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI1_4:\n\t.cell 2852213850513516153367582212096\nCPI3_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","methodIdentifiers":{"cards(bytes32)":"707cd60c","setNFSW(bytes32,bool)":"a3395673"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.ec5dde33\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initialPoster\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"nfsw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"cardId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"nfsw\",\"type\":\"bool\"}],\"name\":\"setNFSW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CardRegistry.sol\":\"CardRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"src/CardRegistry.sol\":{\"keccak256\":\"0x98969c1912447867fecb102e7cfcbfbe82e224057cad61c2c086da8d6ccc2292\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://5d53151c56279c8a52c966e355644e6378d773610050db1c585583ccfe6b8b69\",\"dweb:/ipfs/QmaSCnXh8DVPvWrz7NzHyN35xtYCkUa6DfjkLw14hSvzW1\"]},\"src/ICardRegistry.sol\":{\"keccak256\":\"0x41736d716626b0cd973a27256d9d2fd2f7decdb888ead6898e5bd4580a21c71f\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://23a2c4b0d2fc36d5b1c71bf23b7391f7042b29ce6121e56643d6ae3503a54c3d\",\"dweb:/ipfs/QmUBE3XS26Wtdmv5XPkWy7LWSqarCBWoNSvwt7qR7FunN9\"]}},\"version\":1}","solc_version":"0.8.21","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 35:\"src/CardRegistry.sol\"\nobject \"CardRegistry_37244\" {\n    code {\n        {\n            /// @src 35:191:815  \"contract CardRegistry {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"CardRegistry_37244_deployed\")\n            codecopy(_1, dataoffset(\"CardRegistry_37244_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 35:\"src/CardRegistry.sol\"\n    object \"CardRegistry_37244_deployed\" {\n        code {\n            {\n                /// @src 35:191:815  \"contract CardRegistry {...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(_2))\n                    case 0x707cd60c {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                        mstore(_2, calldataload(4))\n                        mstore(32, _2)\n                        let dataSlot := keccak256(_2, _1)\n                        /// @src 35:219:256  \"mapping(bytes32 => Card) public cards\"\n                        let ret_mpos := copy_array_from_storage_to_memory_string(dataSlot)\n                        let ret_mpos_1 := copy_array_from_storage_to_memory_string(add(dataSlot, /** @src 35:191:815  \"contract CardRegistry {...\" */ 1))\n                        let value := and(sload(/** @src 35:219:256  \"mapping(bytes32 => Card) public cards\" */ add(dataSlot, 2)), /** @src 35:191:815  \"contract CardRegistry {...\" */ sub(shl(160, 1), 1))\n                        let value_1 := and(sload(/** @src 35:219:256  \"mapping(bytes32 => Card) public cards\" */ add(dataSlot, /** @src 35:191:815  \"contract CardRegistry {...\" */ 4)), 0xff)\n                        let memPos := mload(_1)\n                        mstore(memPos, 128)\n                        let tail := abi_encode_string(ret_mpos, add(memPos, 128))\n                        mstore(add(memPos, 32), sub(tail, memPos))\n                        let tail_1 := abi_encode_string(ret_mpos_1, tail)\n                        mstore(add(memPos, _1), value)\n                        mstore(add(memPos, 96), iszero(iszero(value_1)))\n                        return(memPos, sub(tail_1, memPos))\n                    }\n                    case 0xa3395673 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _1) { revert(_2, _2) }\n                        let value_2 := calldataload(36)\n                        let _3 := iszero(iszero(value_2))\n                        if iszero(eq(value_2, _3)) { revert(_2, _2) }\n                        mstore(_2, calldataload(4))\n                        mstore(32, _2)\n                        /// @src 35:781:799  \"cards[cardId].nfsw\"\n                        let _4 := add(/** @src 35:191:815  \"contract CardRegistry {...\" */ keccak256(_2, _1), 4)\n                        let value_3 := and(sload(_4), not(255))\n                        sstore(_4, or(value_3, and(_3, 255)))\n                        return(_2, _2)\n                    }\n                }\n                revert(0, 0)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 35:191:815  \"contract CardRegistry {...\"\n                let slotValue := sload(slot)\n                let length := /** @src -1:-1:-1 */ ret\n                /// @src 35:191:815  \"contract CardRegistry {...\"\n                let _1 := 1\n                length := shr(_1, slotValue)\n                let outOfPlaceEncoding := and(slotValue, _1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                let _2 := 32\n                if eq(outOfPlaceEncoding, lt(length, _2))\n                {\n                    mstore(/** @src -1:-1:-1 */ ret, /** @src 35:191:815  \"contract CardRegistry {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(/** @src -1:-1:-1 */ ret, /** @src 35:191:815  \"contract CardRegistry {...\" */ 0x24)\n                }\n                mstore(memPtr, length)\n                switch outOfPlaceEncoding\n                case 0 {\n                    mstore(add(memPtr, _2), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _2)\n                }\n                case 1 {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 35:191:815  \"contract CardRegistry {...\" */ slot)\n                    let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 35:191:815  \"contract CardRegistry {...\" */ _2)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 35:191:815  \"contract CardRegistry {...\"\n                    for { } lt(i, length) { i := add(i, _2) }\n                    {\n                        mstore(add(add(memPtr, i), _2), sload(dataPos))\n                        dataPos := add(dataPos, _1)\n                    }\n                    ret := add(add(memPtr, i), _2)\n                }\n                let newFreePtr := add(memPtr, and(add(sub(ret, memPtr), 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 35:191:815  \"contract CardRegistry {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 35:191:815  \"contract CardRegistry {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 35:191:815  \"contract CardRegistry {...\"\n                for { } lt(i, length) { i := add(i, 0x20) }\n                {\n                    let _1 := 0x20\n                    mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                }\n                mstore(add(add(pos, length), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 35:191:815  \"contract CardRegistry {...\"\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000815000a\"\n    }\n}\n","hash":"010000492b5a955653de07149fcff48d498f8ec3639a5a7728c0e7cb048ceb7d","factoryDependencies":{},"id":35}